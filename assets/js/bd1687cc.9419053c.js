"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6337],{5680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>y});var o=t(6540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach(function(n){a(e,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function l(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=o.createContext({}),s=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=s(e.components);return o.createElement(c.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef(function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(t),d=a,y=u["".concat(c,".").concat(d)]||u[d]||m[d]||r;return t?o.createElement(y,i(i({ref:n},p),{},{components:t})):o.createElement(y,i({ref:n},p))});function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=d;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<r;s++)i[s]=t[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8678:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>c,default:()=>y,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var o=t(8168),a=t(8587),r=(t(6540),t(5680)),i=["components"],l={id:"env",title:"Env"},c=void 0,s={unversionedId:"env",id:"env",title:"Env",description:"Installation",source:"@site/../docs/env.md",sourceDirName:".",slug:"/env",permalink:"/tofu/docs/env",draft:!1,tags:[],version:"current",lastUpdatedBy:"Rat King",lastUpdatedAt:1619684248,formattedLastUpdatedAt:"Apr 29, 2021",frontMatter:{id:"env",title:"Env"},sidebar:"docs",previous:{title:"ZIO2 Logging",permalink:"/tofu/docs/tofu.logging.recipes.zio2"},next:{title:"WithContext",permalink:"/tofu/docs/withcontext"}},p={},u=[{value:"Installation",id:"installation",level:2},{value:"What is Env, once again?",id:"what-is-env-once-again",level:2},{value:"Features",id:"features",level:2},{value:"Access to environment",id:"access-to-environment",level:3},{value:"Local overriding",id:"local-overriding",level:3},{value:"Monix compatibility",id:"monix-compatibility",level:3},{value:"Complete example",id:"complete-example",level:2}],m={toc:u},d="wrapper";function y(e){var n=e.components,t=(0,a.A)(e,i);return(0,r.yg)(d,(0,o.A)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h2",{id:"installation"},"Installation"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},'"tf.tofu" %% "tofu" % tofu-version'),(0,r.yg)("br",{parentName:"p"}),"\n","or as a standalone dependency:",(0,r.yg)("br",{parentName:"p"}),"\n",(0,r.yg)("inlineCode",{parentName:"p"},'"tf.tofu" %% "tofu-env" % tofu-version'),"  "),(0,r.yg)("h2",{id:"what-is-env-once-again"},"What is Env, once again?"),(0,r.yg)("p",null,"Env is a monad, allowing composition of functions that are context(environment)-aware.",(0,r.yg)("br",{parentName:"p"}),"\n","For example, you may have several functions that depend on some common environment/runtime.",(0,r.yg)("br",{parentName:"p"}),"\n","Env provides a nice and convenient way to compose such functions, allowing access to this environment in a monadic way."),(0,r.yg)("h2",{id:"features"},"Features"),(0,r.yg)("h3",{id:"access-to-environment"},"Access to environment"),(0,r.yg)("p",null,"You can easily access passed environment at any time in a clean monadic way "),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'import tofu.env._\nimport scala.concurrent.duration._\nimport monix.execution.Scheduler.Implicits.global\n\ntype MyContext = String\nval printCtx: Env[MyContext, Unit] = Env.context[MyContext].flatMap(ctx => Env.delay(println(ctx)))\n\nprintCtx.run("I am a context").runSyncUnsafe(1.second) // will print \'I am a context\'"\n')),(0,r.yg)("h3",{id:"local-overriding"},"Local overriding"),(0,r.yg)("p",null,"It is possible to override context locally for specific functions that you may want to use with another context."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'import monix.execution.Scheduler.Implicits.global\nimport scala.concurrent.duration._\nimport tofu.env._\n\nval printContext: Env[MyContext, Unit] = Env.context[MyContext].flatMap(ctx => Env.delay(println(ctx)))\n\nval env: Env[MyContext, Unit] =\n    for {\n      _ <- printContext\n      _ <- printContext.local(ctx => s"$ctx, but new!")\n    } yield ()\n\nenv.run("I am a context").runSyncUnsafe(1.second)\n// will print to console:\n//I am a context\n//I am a context, but new!\n')),(0,r.yg)("h3",{id:"monix-compatibility"},"Monix compatibility"),(0,r.yg)("p",null,"Under the hood, Env is just a function ",(0,r.yg)("inlineCode",{parentName:"p"},"E => Task[A]"),".",(0,r.yg)("br",{parentName:"p"}),"\n","Since it's primary based on Monix task, it mirrors most of its methods and functions, including parallel execution, error handling,\nmemoization, forking and working with resources.",(0,r.yg)("br",{parentName:"p"}),"\n","Env plays well with Cats and Cats-Effect, providing instances for most of typeclasses (see ",(0,r.yg)("inlineCode",{parentName:"p"},"tofu.env.EnvInstances"),"),\nexcept ",(0,r.yg)("inlineCode",{parentName:"p"},"Effect")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"ConcurrentEffect")," (which allow starting computation at any place, so it contradicts Env, which requires context being passed)."),(0,r.yg)("h2",{id:"complete-example"},"Complete example"),(0,r.yg)("p",null,"Below is a complete example of how Env can be used to pass some environment to computations, use it through the code"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'import monix.eval.Task\nimport scala.concurrent.duration._\n\nobject EnvExamples extends scala.App {\n\n  /** This is sample context for our computation  */\n  case class MyContext(userId: String)\n\n  // These aliases are declared once in your codebase and are used everywhere later\n  type MyEnv[A] = Env[MyContext, A]\n  object MyEnv extends EnvSpecializedFunctions[MyContext]\n\n  // Pure value, embedded in Env\n  val f1: MyEnv[String] = MyEnv.pure("Hello")\n\n  /** Will log everything passed with context values in form of `[user1] myCoolMessage` */\n  def log(msg: String): MyEnv[Unit] =\n    for {\n      context <- MyEnv.context\n      _       <- MyEnv.delay(println(s"[${context.userId}] $msg"))\n    } yield ()\n\n  // Env is composed of smaller functions, using all-known methods of flatMap, map, for-comprehensions etc.\n  val env: MyEnv[Unit] =\n    for {\n      _   <- log("Start")\n      str <- f1\n      _   <- log(s"Result: $str")\n      _   <- log("End")\n    } yield ()\n\n  // running Env with context yields value of type `monix.eval.Task`\n  val task: Task[Unit] = env.run(MyContext("user1"))\n\n  // evaluates Task, running our computation, will yield\n  // [user1] Start\n  // [user1] Result: Hello\n  // [user1] End\n  // Do not use runSyncUnsafe except on the edges of your beautiful pure program\n  task.runSyncUnsafe(1.second)\n}\n\n')))}y.isMDXComponent=!0}}]);
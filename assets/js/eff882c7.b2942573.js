"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4204],{1845:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>g,default:()=>m,frontMatter:()=>r,metadata:()=>p,toc:()=>s});var t=o(8168),a=o(8587),i=(o(6540),o(5680)),l=["components"],r={id:"tofu.logging.recipes.zio2",title:"ZIO2 Logging"},g=void 0,p={unversionedId:"tofu.logging.recipes.zio2",id:"tofu.logging.recipes.zio2",title:"ZIO2 Logging",description:"Tofu provides an implementation of zio.ZLogger and special annotations called ZLogAnnotation",source:"@site/../docs/tofu.logging.recipes.zio2.md",sourceDirName:".",slug:"/tofu.logging.recipes.zio2",permalink:"/tofu/docs/tofu.logging.recipes.zio2",draft:!1,tags:[],version:"current",lastUpdatedBy:"Alexander",lastUpdatedAt:1689846037,formattedLastUpdatedAt:"Jul 20, 2023",frontMatter:{id:"tofu.logging.recipes.zio2",title:"ZIO2 Logging"},sidebar:"docs",previous:{title:"ZIO Logging",permalink:"/tofu/docs/tofu.logging.recipes.zio"},next:{title:"Env",permalink:"/tofu/docs/env"}},d={},s=[{value:"ZIO 2 logging facade",id:"zio-2-logging-facade",level:2},{value:"ZLogAnnotation",id:"zlogannotation",level:3},{value:"TofuDefaultContext",id:"tofudefaultcontext",level:3},{value:"ZIO implementation of Tofu Logging",id:"zio-implementation-of-tofu-logging",level:2},{value:"ContextProvider",id:"contextprovider",level:3},{value:"Example",id:"example",level:2}],u={toc:s},c="wrapper";function m(e){var n=e.components,o=(0,a.A)(e,l);return(0,i.yg)(c,(0,t.A)({},u,o,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"Tofu provides an implementation of ",(0,i.yg)("inlineCode",{parentName:"p"},"zio.ZLogger")," and special annotations called ",(0,i.yg)("inlineCode",{parentName:"p"},"ZLogAnnotation"),"\nfor ",(0,i.yg)("a",{parentName:"p",href:"https://zio.dev/guides/tutorials/enable-logging-in-a-zio-application"},"ZIO logging facade"),".\nIf you feel more confident with ",(0,i.yg)("a",{parentName:"p",href:"/tofu/docs/tofu.logging.main.entities#logging"},"Tofu Logging")," interface, ",(0,i.yg)("inlineCode",{parentName:"p"},"ULogging"),"\n, ",(0,i.yg)("inlineCode",{parentName:"p"},"ZLogging.Make"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"ZLogs")," are at your service."),(0,i.yg)("p",null,"First add the following dependency:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sbt"},'libraryDependencies += "tf.tofu" %% "tofu-zio2-logging" % "<latest version in the badge in README>"\n')),(0,i.yg)("p",null,"Then import the package:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},"import tofu.logging.zlogs._\n")),(0,i.yg)("h2",{id:"zio-2-logging-facade"},"ZIO 2 logging facade"),(0,i.yg)("p",null,"To use Tofu with ZIO logging facade just add ",(0,i.yg)("inlineCode",{parentName:"p"},"TofuZLogger")," to your app runtime:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},'object Main extends ZIOAppDefault {\n\n  val program: UIO[Unit] = ZIO.log("Hello, ZIO logging!")\n\n  override def run = {\n    program.logSpan("full_app") @@ ZIOAspect.annotated("foo", "bar")\n  }.provide(\n    Runtime.removeDefaultLoggers,\n    TofuZLogger.addToRuntime\n  )\n\n}\n')),(0,i.yg)("p",null,"The log will be:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "level": "INFO",\n  "logger_name": "tofu.logging.zlogs.Main",\n  "message": "Hello, ZIO logging!",\n  "zSpans": {\n    "full_app": 440\n  },\n  "zAnnotations": {\n    "foo": "bar"\n  }\n}\n')),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"logger_name")," is parsed from ",(0,i.yg)("inlineCode",{parentName:"li"},"zio.Trace")," which contains the location where log method is called"),(0,i.yg)("li",{parentName:"ul"},"all ",(0,i.yg)("inlineCode",{parentName:"li"},"zio.LogSpan")," are collected in the json object named ",(0,i.yg)("strong",{parentName:"li"},"zSpans")),(0,i.yg)("li",{parentName:"ul"},"all ",(0,i.yg)("inlineCode",{parentName:"li"},"zio.LogAnnotation")," are collected in the json object named ",(0,i.yg)("strong",{parentName:"li"},"zAnnotations")," (to avoid conflicts with Tofu\nannotations)")),(0,i.yg)("h3",{id:"zlogannotation"},"ZLogAnnotation"),(0,i.yg)("p",null,"A specialized version of ",(0,i.yg)("a",{parentName:"p",href:"/tofu/docs/tofu.logging.annotation"},"LogAnnotation")," allows you to add a context via ZIO aspects:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},'import tofu.logging.zlogs.ZLogAnnotation._\n\nval httpCode: ZLogAnnotation[Int] = make("httpCode")\n\noverride def run = {\n  program @@ httpCode(204) @@ loggerName("MyLogger")\n}.provide(\n  Runtime.removeDefaultLoggers,\n  TofuZLogger.addToRuntime\n)\n')),(0,i.yg)("p",null,"will produce:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "level": "INFO",\n  "logger_name": "MyLogger",\n  "message": "Hello, ZIO logging!",\n  "httpCode": 204\n}\n')),(0,i.yg)("p",null,"You can change the logger name via ",(0,i.yg)("inlineCode",{parentName:"p"},"ZLogAnnotation.loggerName"),"."),(0,i.yg)("p",null,"Also you can create scoped annotations via ",(0,i.yg)("inlineCode",{parentName:"p"},"ZLogAnnotation.scoped")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},'import tofu.logging.zlogs.ZLogAnnotation._\n\nval httpCode: ZLogAnnotation[Int] = make("httpCode")\n\noverride def run = {\n  ZIO.scoped {\n    for {\n      _    <- httpCode.scoped(code)\n      _    <- program\n    } yield ()\n  }\n}.provide(\n  Runtime.removeDefaultLoggers,\n  TofuZLogger.addToRuntime\n)\n')),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"ZLogAnnotation.make[A]")," implicitly requires a ",(0,i.yg)("inlineCode",{parentName:"p"},"Loggable[A]")," instance, see more\nin ",(0,i.yg)("a",{parentName:"p",href:"/tofu/docs/tofu.logging.loggable"},"Loggable")," section."),(0,i.yg)("h3",{id:"tofudefaultcontext"},"TofuDefaultContext"),(0,i.yg)("p",null,"Using this service you can look up an element from the context added via ",(0,i.yg)("inlineCode",{parentName:"p"},"ZLogAnnotation"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},'val httpCode: ZLogAnnotation[Int] = make("httpCode")\n\nval program = {\n  for {\n    maybeCode <- ZIO.serviceWithZIO[TofuDefaultContext](_.getValue(httpCode)) // Some(204)\n    //...\n  } yield ()\n} @@ httpCode(204)\n')),(0,i.yg)("h2",{id:"zio-implementation-of-tofu-logging"},"ZIO implementation of Tofu Logging"),(0,i.yg)("p",null,"If you want more flexible Tofu Logging, ",(0,i.yg)("inlineCode",{parentName:"p"},"tofu-zio2-logging")," provides some useful stuff:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"ULogging")," - is a type alias for ",(0,i.yg)("inlineCode",{parentName:"p"},"Logging[UIO]"),", logging methods of this logger look\nlike ",(0,i.yg)("inlineCode",{parentName:"p"},"def info(message: String, values: LoggedValue*): UIO[Unit]"))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Logger factory type aliases:"),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"ZLogging.Make")," - is a type alias for ",(0,i.yg)("inlineCode",{parentName:"li"},"Logs[Id, UIO]"),", produces plain instances of ",(0,i.yg)("inlineCode",{parentName:"li"},"ULogging"),"."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"ULogs")," - is a type alias for ",(0,i.yg)("inlineCode",{parentName:"li"},"Logs[UIO, UIO]"),", produces instances of ",(0,i.yg)("inlineCode",{parentName:"li"},"ULogging")," inside ",(0,i.yg)("inlineCode",{parentName:"li"},"UIO")," effect."))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"ZLogging.Make")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"ZLogs")," objects provide corresponding factory instances"),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"layerPlain")," creates layer contains simple implementation of ",(0,i.yg)("inlineCode",{parentName:"li"},"ZLogging.Make")," (or ",(0,i.yg)("inlineCode",{parentName:"li"},"ULogs"),")"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"layerPlainWithContext")," creates layer with an implementation of ",(0,i.yg)("inlineCode",{parentName:"li"},"ZLogging.Make")," (or ",(0,i.yg)("inlineCode",{parentName:"li"},"ULogs"),") producing loggers\nwhich add the context to your logs from the ",(0,i.yg)("inlineCode",{parentName:"li"},"ContextProvider"),".\nThis one is supposed to be provided at the app creation point via ZLayer-s."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"layerContextual[R: Loggable]")," makes a factory ",(0,i.yg)("inlineCode",{parentName:"li"},"ZMake[R]")," (or ",(0,i.yg)("inlineCode",{parentName:"li"},"ZLogs[R]"),") of contextual ",(0,i.yg)("inlineCode",{parentName:"li"},"ZLogging[R]")," retrieving a\ncontext from\nthe ZIO environment of the logging methods. This legacy approach is contrary to\nZIO ",(0,i.yg)("a",{parentName:"li",href:"https://zio.dev/reference/service-pattern/"},"Service Pattern"),", so we won't cover it here.")))),(0,i.yg)("h3",{id:"contextprovider"},"ContextProvider"),(0,i.yg)("p",null,"If we need to carry some contextual information and don't want to use the ZIO environment to store it, we can use\na ",(0,i.yg)("inlineCode",{parentName:"p"},"ContextProvider"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},"trait ContextProvider {\n  def getCtx: UIO[LoggedValue]\n}\n")),(0,i.yg)("p",null,"This service required by ",(0,i.yg)("inlineCode",{parentName:"p"},"layerPlainWithContext")," factory. Every logger will log the provided ",(0,i.yg)("inlineCode",{parentName:"p"},"LoggedValue")," which\nevaluated every time the log method is called. ZIO encourage us to\nuse ",(0,i.yg)("a",{parentName:"p",href:"https://zio.dev/reference/state-management/fiberref"},"FiberRef")," under the hood, which binds the context to an\nexecuting fiber.\nIt can be convenient to use ",(0,i.yg)("inlineCode",{parentName:"p"},"ValuedContextProvider")," to implement your own instance:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},"abstract class ValueContextProvider[A](implicit L: Loggable[A]) extends ContextProvider {\n  protected def getA: UIO[A]\n}\n")),(0,i.yg)("p",null,"Or you can use ",(0,i.yg)("inlineCode",{parentName:"p"},"TofuDefaultContext")," (implements ",(0,i.yg)("inlineCode",{parentName:"p"},"ContextProvider"),") which provides all tofu annotations added\nvia ",(0,i.yg)("inlineCode",{parentName:"p"},"ZLogAnnotation"),":"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"TofuDefaultContext.layerZioContextOff")," \u2014 logs just tofu annotations"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"TofuDefaultContext.layerZioContextOn")," \u2014 includes ",(0,i.yg)("inlineCode",{parentName:"li"},"LogSpan"),"-s and zio annotations")),(0,i.yg)("h2",{id:"example"},"Example"),(0,i.yg)("p",null,"Let's write a simple service which logs a current date."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},'import tofu.logging.zlogs._\nimport zio._\n\nval currentDate: ZLogAnnotation[LocalDate] = make("today")\n\nclass FooBarService(logger: ULogging) {\n  def doLogs: UIO[Unit] = for {\n    now <- Clock.localDateTime\n    _ <- logger.info("Got current date {}", currentDate -> now.toLocalDate)\n  } yield {}\n}\n\nobject FooBarService {\n  val layer: URLayer[ULogs, FooBarService] = ZLayer(\n    ZIO.serviceWithZIO[ULogs](_.forService[FooBarService])\n      .map(new FooBarService(_))\n  )\n}\n')),(0,i.yg)("p",null,"Then look at the main app:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},'object Main extends ZIOAppDefault {\n  def run = {\n    for {\n      fooBar <- ZIO.service[FooBarService]\n      _ <- fooBar.doLogs\n      //...\n    } yield ()\n  }.provide(\n    FooBarService.layer,\n    ZLogs.layerPlainWithContext,\n    TofuDefaultContext.layerZioContextOn\n  ) @@ ZIOAspect.annotated("foo", "bar") @@ httpCode(204)\n}\n')),(0,i.yg)("p",null,"The output of this program will be:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "level": "INFO",\n  "logger_name": "tofu.logging.zlogs.FooBarService",\n  "message": "Got current date 2022-09-20",\n  "today": "2022-09-20",\n  "httpCode": 204,\n  "zAnnotations": {\n    "foo": "bar"\n  }\n}\n')),(0,i.yg)("p",null,"If ",(0,i.yg)("inlineCode",{parentName:"p"},"TofuDefaultContext.layerZioContextOff")," was used instead of ",(0,i.yg)("inlineCode",{parentName:"p"},"layerZioContextOn"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"zAnnotations")," wouldn't be logged."))}m.isMDXComponent=!0},5680:(e,n,o)=>{o.d(n,{xA:()=>d,yg:()=>m});var t=o(6540);function a(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function i(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),o.push.apply(o,t)}return o}function l(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?i(Object(o),!0).forEach(function(n){a(e,n,o[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))})}return e}function r(e,n){if(null==e)return{};var o,t,a=function(e,n){if(null==e)return{};var o,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)o=i[t],n.indexOf(o)>=0||(a[o]=e[o]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)o=i[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var g=t.createContext({}),p=function(e){var n=t.useContext(g),o=n;return e&&(o="function"==typeof e?e(n):l(l({},n),e)),o},d=function(e){var n=p(e.components);return t.createElement(g.Provider,{value:n},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef(function(e,n){var o=e.components,a=e.mdxType,i=e.originalType,g=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),s=p(o),c=a,m=s["".concat(g,".").concat(c)]||s[c]||u[c]||i;return o?t.createElement(m,l(l({ref:n},d),{},{components:o})):t.createElement(m,l({ref:n},d))});function m(e,n){var o=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=o.length,l=new Array(i);l[0]=c;var r={};for(var g in n)hasOwnProperty.call(n,g)&&(r[g]=n[g]);r.originalType=e,r[s]="string"==typeof e?e:a,l[1]=r;for(var p=2;p<i;p++)l[p]=o[p];return t.createElement.apply(null,l)}return t.createElement.apply(null,o)}c.displayName="MDXCreateElement"}}]);
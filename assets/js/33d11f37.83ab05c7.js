"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8223],{5680:(e,r,n)=>{n.d(r,{xA:()=>c,yg:()=>f});var t=n(6540);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable})),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach(function(r){a(e,r,n[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))})}return e}function l(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=t.createContext({}),p=function(e){var r=t.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},c=function(e){var r=p(e.components);return t.createElement(s.Provider,{value:r},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},m=t.forwardRef(function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?t.createElement(f,i(i({ref:r},c),{},{components:n})):t.createElement(f,i({ref:r},c))});function f(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7702:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>f,frontMatter:()=>l,metadata:()=>p,toc:()=>d});var t=n(8168),a=n(8587),o=(n(6540),n(5680)),i=["components"],l={id:"errors",title:"Error management"},s=void 0,p={unversionedId:"errors",id:"errors",title:"Error management",description:"Producing errors",source:"@site/../docs/errors.md",sourceDirName:".",slug:"/errors",permalink:"/tofu/docs/errors",draft:!1,tags:[],version:"current",lastUpdatedBy:"susliko",lastUpdatedAt:1589407182,formattedLastUpdatedAt:"May 13, 2020",frontMatter:{id:"errors",title:"Error management"},sidebar:"docs",previous:{title:"Installation",permalink:"/tofu/docs/installation"},next:{title:"Forking and Racing",permalink:"/tofu/docs/fork"}},c={},d=[{value:"Producing errors",id:"producing-errors",level:2},{value:"Problem",id:"problem",level:3},{value:"Solution",id:"solution",level:3},{value:"Recovering from errors",id:"recovering-from-errors",level:2},{value:"Problem",id:"problem-1",level:3},{value:"Solution",id:"solution-1",level:3}],u={toc:d},m="wrapper";function f(e){var r=e.components,n=(0,a.A)(e,i);return(0,o.yg)(m,(0,t.A)({},u,n,{components:r,mdxType:"MDXLayout"}),(0,o.yg)("h2",{id:"producing-errors"},"Producing errors"),(0,o.yg)("h3",{id:"problem"},"Problem"),(0,o.yg)("p",null,"One of the major issues of the MTL style is an error handling."),(0,o.yg)("p",null,"The weakest ",(0,o.yg)("a",{parentName:"p",href:"https://typelevel.org/cats/"},(0,o.yg)("inlineCode",{parentName:"a"},"Cats"))," typeclass, which enables operations with errors, is an\n",(0,o.yg)("a",{parentName:"p",href:"https://typelevel.org/cats/api/cats/ApplicativeError.html"},(0,o.yg)("inlineCode",{parentName:"a"},"ApplicativeError")),".\nIt brings a full ",(0,o.yg)("inlineCode",{parentName:"p"},"Applicative")," instance apart from error-related methods and\nthis means, that we are not allowed to have a few ",(0,o.yg)("inlineCode",{parentName:"p"},"FunctorRaise")," or ",(0,o.yg)("inlineCode",{parentName:"p"},"ApplicativeError")," instances in the scope, since\ntheir underlying ",(0,o.yg)("inlineCode",{parentName:"p"},"Functor"),"/",(0,o.yg)("inlineCode",{parentName:"p"},"Applicative")," instances will come into conflict:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},'    import cats._\n    case class ArithmeticError() extends Throwable\n    case class ParseError() extends Throwable\n\n    def divideBad[F[_]](x: String, y: String)(implicit \n        F1: ApplicativeError[F, ArithmeticError],\n        F2: ApplicativeError[F, ParseError]): F[String] = \n        // using Functor / Applicative syntax here will cause an\n        // "ambiguous implicit values" error\n        ???\n')),(0,o.yg)("p",null,"So we are forced to choose a single unified error type."),(0,o.yg)("h3",{id:"solution"},"Solution"),(0,o.yg)("p",null,"The simplest solution here is to create a typeclass, that is not a subtype of Functor:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"trait Raise[F[_], E]{\n  def raise[A](err: E): F[A]\n}\n")),(0,o.yg)("p",null,"(see also\ncats-mtl 's ",(0,o.yg)("a",{parentName:"p",href:"https://typelevel.org/cats-mtl/mtl-classes/functorraise.html"},(0,o.yg)("inlineCode",{parentName:"a"},"FunctorRaise")),")."),(0,o.yg)("p",null,"It would allow us to distinguish between different types of errors:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},'import cats.effect.IO\nimport tofu._\nimport tofu.syntax.monadic._\nimport tofu.syntax.raise._\n\ndef divide[F[_]: Monad](x: String, y: String)(implicit \n    F1: Raise[F, ArithmeticError],\n    F2: Raise[F, ParseError]\n    ): F[String] = \n    ( x.toIntOption.orRaise(ParseError()),\n      y.toIntOption.orRaise(ParseError())\n       .verified(_ != 0)(ArithmeticError())\n    ).mapN(_ / _).map(_.toString)\n\ndivide[IO]("10", "3").attempt.unsafeRunSync()\n\ndivide[IO]("10","0").attempt.unsafeRunSync()\n\ndivide[IO]("1", "0").attempt.unsafeRunSync()\n        \n')),(0,o.yg)("h2",{id:"recovering-from-errors"},"Recovering from errors"),(0,o.yg)("h3",{id:"problem-1"},"Problem"),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"ApplicativeError")," provides the following method for error handling:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"  def handleErrorWith[A](fa: F[A])(f: E => F[A]): F[A]\n")),(0,o.yg)("p",null,"Here, if ",(0,o.yg)("inlineCode",{parentName:"p"},"f")," does not fail, ",(0,o.yg)("inlineCode",{parentName:"p"},"F[A]")," should describe a successful computation. The types, however, do not convey this fact,\nsince we have no type for ",(0,o.yg)("inlineCode",{parentName:"p"},"Unexeptional")," partner. Read more ",(0,o.yg)("a",{parentName:"p",href:"https://typelevel.org/blog/2018/04/13/rethinking-monaderror.html"},"here")),(0,o.yg)("h3",{id:"solution-1"},"Solution"),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"Tofu")," is shipped with a few typeclasses targeting the problem. The simplest one is"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"trait RestoreTo[F[_], G[_]] {\n  def restore[A](fa: F[A]): G[Option[A]]\n}\n")),(0,o.yg)("p",null,"which can be used to restore from any failure condition."),(0,o.yg)("p",null,"Another one is"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"trait HandleTo[F[_], G[_], E] extends RestoreTo[F, G] {\n  def handleWith[A](fa: F[A])(f: E => G[A]): G[A]\n\n  def handle[A](fa: F[A])(f: E => A)(implicit G: Applicative[G]): G[A] =\n    handleWith(fa)(e => G.pure(f(e)))\n\n  def attempt[A](fa: F[A])(implicit F: Functor[F], G: Applicative[G]): G[Either[E, A]] =\n    handle(F.map(fa)(_.asRight[E]))(_.asLeft)\n}\n")),(0,o.yg)("p",null,"which can handle concrete error type:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.data.EitherT\nimport cats.instances.vector._\nimport cats.syntax.foldable._\nimport cats.syntax.traverse._\nimport tofu._\nimport tofu.syntax.handle._\nimport tofu.syntax.monadic._\nimport tofu.syntax.raise._\n\ndef splitErrors[\n  T[_]: Traverse: Alternative, \n  F[_]: Functor, G[_]: Applicative, E, A](ls: T[F[A]])(\n    implicit errors: ErrorsTo[F, G, E]\n): G[(T[E], T[A])] =\n  ls.traverse(_.attemptTo[G, E]).map(_.partitionEither(identity))\n\ndef parseInt[F[_]: Applicative: Raise[*[_], String]](s: String): F[Int] =\n  s.toIntOption.orRaise(s"could not parse $s")\n\ntype Calc[A] = EitherT[Eval, String, A]\n\nsplitErrors[Vector, Calc, Eval, String, Int](\n  Vector("1", "hello", "2", "world", "3").map(parseInt[Calc])\n).value\n')),(0,o.yg)("p",null,"HandleTo, empowered with Raise, is called ",(0,o.yg)("inlineCode",{parentName:"p"},"ErrorsTo"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"trait ErrorsTo[F[_], G[_], E] extends Raise[F, E] with HandleTo[F, G, E]\n")),(0,o.yg)("p",null,"There are also specialized versions of ",(0,o.yg)("inlineCode",{parentName:"p"},"RestoreTo"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"HandleTo")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"ErrorsTo")," without ",(0,o.yg)("inlineCode",{parentName:"p"},"To"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"trait Restore[F[_]] extends RestoreTo[F, F] {\n  def restoreWith[A](fa: F[A])(ra: => F[A]): F[A]\n}\n\ntrait Handle[F[_], E] extends HandleTo[F, F, E] with Restore[F] {\n\n  def tryHandleWith[A](fa: F[A])(f: E => Option[F[A]]): F[A]\n\n  def tryHandle[A](fa: F[A])(f: E => Option[A])(implicit F: Applicative[F]): F[A] =\n    tryHandleWith(fa)(e => f(e).map(F.pure))\n\n  def handleWith[A](fa: F[A])(f: E => F[A]): F[A] =\n    tryHandleWith(fa)(e => Some(f(e)))\n\n  def recoverWith[A](fa: F[A])(pf: PartialFunction[E, F[A]]): F[A] =\n    tryHandleWith(fa)(pf.lift)\n\n  def recover[A](fa: F[A])(pf: PartialFunction[E, A])(implicit F: Applicative[F]): F[A] =\n    tryHandle(fa)(pf.lift)\n\n  def restoreWith[A](fa: F[A])(ra: => F[A]): F[A] = handleWith(fa)(_ => ra)\n}\n\n\ntrait Errors[F[_], E] extends Raise[F, E] with Handle[F, E] with ErrorsTo[F, F, E]\n")))}f.isMDXComponent=!0}}]);
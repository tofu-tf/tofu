"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7605],{2218:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>y,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var a=n(8168),r=n(8587),o=(n(6540),n(5680)),i=["components"],s={id:"withcontext",title:"WithContext"},c=void 0,l={unversionedId:"withcontext",id:"withcontext",title:"WithContext",description:"Installation",source:"@site/../docs/withcontext.md",sourceDirName:".",slug:"/withcontext",permalink:"/tofu/docs/withcontext",draft:!1,tags:[],version:"current",lastUpdatedBy:"Ivan Aristov",lastUpdatedAt:1631705982,formattedLastUpdatedAt:"Sep 15, 2021",frontMatter:{id:"withcontext",title:"WithContext"},sidebar:"docs",previous:{title:"Env",permalink:"/tofu/docs/env"},next:{title:"Cats MTL interop",permalink:"/tofu/docs/kernelcatsmtlinterop"}},p={},d=[{value:"Installation",id:"installation",level:2},{value:"What if you don&#39;t need Env",id:"what-if-you-dont-need-env",level:2},{value:"Usage example and a short use case description",id:"usage-example-and-a-short-use-case-description",level:3}],u={toc:d},m="wrapper";function y(e){var t=e.components,n=(0,r.A)(e,i);return(0,o.yg)(m,(0,a.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h2",{id:"installation"},"Installation"),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},'"tf.tofu" %% "tofu" % tofu-version'),(0,o.yg)("br",{parentName:"p"}),"\n","or as a standalone dependency\n",(0,o.yg)("inlineCode",{parentName:"p"},'"tf.tofu" %% "tofu-core-*" % tofu-version'),"\n(replace suffix ",(0,o.yg)("inlineCode",{parentName:"p"},"*")," with ",(0,o.yg)("inlineCode",{parentName:"p"},"ce2")," or ",(0,o.yg)("inlineCode",{parentName:"p"},"ce3")," depends on which cats-effect version you use)"),(0,o.yg)("h2",{id:"what-if-you-dont-need-env"},"What if you don't need Env"),(0,o.yg)("p",null,"Env is a powerful monad, but what if you're sure that you don't need it?\nYou can still use convenient Tofu concepts to work with your own Environment (",(0,o.yg)("inlineCode",{parentName:"p"},"WithContext"),").  "),(0,o.yg)("h3",{id:"usage-example-and-a-short-use-case-description"},"Usage example and a short use case description"),(0,o.yg)("p",null,"The short story long, it is possible to use ",(0,o.yg)("inlineCode",{parentName:"p"},"ReaderT"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.data.ReaderT\nimport cats.instances.option._\nimport tofu._\nimport tofu.optics._\n\n// defining our own Env that stores some User\ncase class User(id: Int, name: String)\ncase class MyEnv(user: User)\n\n// defining an extractor, extractor is a common lens that you can read about\n// in a paragraph about lenses\nimplicit val extractor: Extract[MyEnv, User] = _.user\n      \ndef program[F[_]: WithContext[*[_], MyEnv]](implicit u: MyEnv Extract User): F[String] = \n  WithContext[F, MyEnv].extract(u).ask(_.name)\n\n// ~voil\xe0\nprogram[ReaderT[Option, MyEnv, *]].run(MyEnv(User(0, "Tofu"))) //> Some(Tofu): Option[String]\n\n')),(0,o.yg)("p",null,"A bit more complicated example, that shows lenses usage only in the functions that require them:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala:reset"},'import cats._\nimport cats.data.ReaderT\nimport cats.instances.option._\nimport cats.syntax.apply._\nimport tofu._\nimport tofu.optics._\n\n// defining our own Env that stores a User and some related Metadata\ncase class User(id: Int, name: String)\ncase class Metadata(height: Double, age: Int)\ncase class MyEnv(user: User, md: Metadata)\n\n// defining extractors\nimplicit val userExtractor: Extract[MyEnv, User]   = _.user\nimplicit val mdExtractor: Extract[MyEnv, Metadata] = _.md\n\n// it is possible to define a program that only has a context\ndef program[F[_]: Apply: WithContext[*[_], MyEnv]]: F[String] = \n  (name[F], age[F]).mapN { (name, age) => s"$name: $age" }\n\n// but all the functions that were called inside a program\n// have on demand and only necessary extractors\ndef name[F[_]: WithContext[*[_], MyEnv]](implicit u: MyEnv Extract User): F[String] = \n  WithContext[F, MyEnv].extract(u).ask(_.name)\n\ndef age[F[_]: WithContext[*[_], MyEnv]](implicit m: MyEnv Extract Metadata): F[Int] = \n  WithContext[F, MyEnv].extract(m).ask(_.age)\n\n// ~voil\xe0\nprogram[ReaderT[Option, MyEnv, *]]\n  .run(MyEnv(User(0, "Tofu"), Metadata(60, 18))) //> Some(Tofu: 18): Option[String]\n')),(0,o.yg)("p",null,"It is also possible to do define some ",(0,o.yg)("inlineCode",{parentName:"p"},"WithContext")," explicitly without having a need in ",(0,o.yg)("inlineCode",{parentName:"p"},"Env")," or ",(0,o.yg)("inlineCode",{parentName:"p"},"ReaderT")," monads:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala:reset"},'import cats._\nimport cats.instances.option._\nimport cats.syntax.apply._\nimport tofu._\nimport tofu.optics._\n\n// defining our own Env that stores a User and some related Metadata\ncase class User(id: Int, name: String)\ncase class Metadata(height: Double, age: Int)\ncase class MyEnv(user: User, md: Metadata)\n\n// defining extractors\nimplicit val userExtractor: Extract[MyEnv, User]   = _.user\nimplicit val mdExtractor: Extract[MyEnv, Metadata] = _.md\n\n// what if we don\'t need or don\'t know what ReaderT is\n// we can define a const Context than\nimplicit val ctx: WithContext[Option, MyEnv] =\n  WithContext.const[Option, MyEnv](MyEnv(User(0, "Tofu"), Metadata(60, 18)))\n\n// it is still possible to define a program that only has a context\ndef program[F[_]: Apply: WithContext[*[_], MyEnv]]: F[String] =\n  (name[F], age[F]).mapN { (name, age) => s"$name: $age" }\n\n// and all the functions that were called inside a program\n// have on demand and only necessary extractors\ndef name[F[_]: WithContext[*[_], MyEnv]](implicit u: MyEnv Extract User): F[String] =\n  WithContext[F, MyEnv].extract(u).ask(_.name)\n\ndef age[F[_]: WithContext[*[_], MyEnv]](implicit m: MyEnv Extract Metadata): F[Int] =\n  WithContext[F, MyEnv].extract(m).ask(_.age)\n\n// ~voil\xe0\nprogram[Option] //> Some(Tofu: 18): Option[String]\n')))}y.isMDXComponent=!0},5680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>y});var a=n(6540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach(function(t){r(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef(function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=r,y=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(y,i(i({ref:t},p),{},{components:n})):a.createElement(y,i({ref:t},p))});function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);
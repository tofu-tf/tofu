"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9370],{5680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>d});var a=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach(function(n){r(e,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var g=a.createContext({}),s=function(e){var n=a.useContext(g),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(g.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},y=a.forwardRef(function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,g=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=s(t),y=r,d=c["".concat(g,".").concat(y)]||c[y]||p[y]||o;return t?a.createElement(d,l(l({ref:n},u),{},{components:t})):a.createElement(d,l({ref:n},u))});function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=y;var i={};for(var g in n)hasOwnProperty.call(n,g)&&(i[g]=n[g]);i.originalType=e,i[c]="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}y.displayName="MDXCreateElement"},6315:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>g,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=t(8168),r=t(8587),o=(t(6540),t(5680)),l=["components"],i={id:"tofu.logging.key-features",title:"Key Features"},g="Simple logging for your services",s={unversionedId:"tofu.logging.key-features",id:"tofu.logging.key-features",title:"Key Features",description:"Key features",source:"@site/../docs/tofu.logging.key-features.md",sourceDirName:".",slug:"/tofu.logging.key-features",permalink:"/tofu/docs/tofu.logging.key-features",draft:!1,tags:[],version:"current",lastUpdatedBy:"\u0410\u043d\u0442\u043e\u043d \u0412\u043e\u0438\u0306\u0446\u0438\u0448\u0435\u0432\u0441\u043a\u0438\u0438\u0306",lastUpdatedAt:1631546433,formattedLastUpdatedAt:"Sep 13, 2021",frontMatter:{id:"tofu.logging.key-features",title:"Key Features"},sidebar:"docs",previous:{title:"Core concepts",permalink:"/tofu/docs/tofu.logging.main.entities"},next:{title:"tofu.syntax.logging",permalink:"/tofu/docs/tofu.logging.syntax"}},u={},c=[{value:"Key features",id:"key-features",level:2},{value:"Supported for every popular style",id:"supported-for-every-popular-style",level:3},{value:"Concise syntax",id:"concise-syntax",level:3},{value:"Structured and controllable",id:"structured-and-controllable",level:3},{value:"Context support",id:"context-support",level:3},{value:"What&#39;s next",id:"whats-next",level:2}],p={toc:c},y="wrapper";function d(e){var n=e.components,t=(0,r.A)(e,l);return(0,o.yg)(y,(0,a.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"simple-logging-for-your-services"},"Simple logging for your services"),(0,o.yg)("h2",{id:"key-features"},"Key features"),(0,o.yg)("h3",{id:"supported-for-every-popular-style"},"Supported for every popular style"),(0,o.yg)("p",null,"You can use ",(0,o.yg)("inlineCode",{parentName:"p"},"tofu.logging")," in any style you want:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Tagless Final style;"),(0,o.yg)("li",{parentName:"ul"},"Simple ",(0,o.yg)("inlineCode",{parentName:"li"},"cats.effect.IO")," or ",(0,o.yg)("inlineCode",{parentName:"li"},"(monix|zio).Task")," and ",(0,o.yg)("inlineCode",{parentName:"li"},"ReaderT"),";"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"ZIO")," and ZLayers \u2014 with the help of dedicated module ",(0,o.yg)("inlineCode",{parentName:"li"},"tofu-zio-logging")," and ",(0,o.yg)("inlineCode",{parentName:"li"},"ZLogs"),";"),(0,o.yg)("li",{parentName:"ul"},"Even with ",(0,o.yg)("inlineCode",{parentName:"li"},"Future"),"s (although it's kinda in the past).")),(0,o.yg)("h3",{id:"concise-syntax"},"Concise syntax"),(0,o.yg)("p",null,"With the implicit instance of ",(0,o.yg)("inlineCode",{parentName:"p"},"Logging")," one can log messages with ease:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},'import tofu.logging._\nimport tofu.syntax.logging._\n\nval error = new Throwable("Oh no.")\n\ndef log[F[_] : Logging : Monad] = for {\n  _ <- info"Hi! I\'m logging"\n  _ <- warn"Hello again!"\n  _ <- error"It\'s me, error!"\n  _ <- errorCause"So sad, I\'ve got an error"(error)\n} yield ()\n')),(0,o.yg)("h3",{id:"structured-and-controllable"},"Structured and controllable"),(0,o.yg)("p",null,"You can easily put any necessary values into the structure of the log message with ",(0,o.yg)("inlineCode",{parentName:"p"},"Loggable"),"; also you can fully\ncontrol what is logged and what is not:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},'import derevo._\nimport tofu.logging._\n\n@derive(Loggable)\ncase class Payment(id: String, @hidden cardNumber: String, amount: Long)\n\ndef log[F[_] : Logging : Monad](payment: Payment) = info"Got payment $payment"\n')),(0,o.yg)("p",null,"Given that there's a defined ",(0,o.yg)("inlineCode",{parentName:"p"},"Loggable")," instance for this context and provided logger is context aware (e.g. created\nwith ",(0,o.yg)("inlineCode",{parentName:"p"},"contextual")," method), every logged message will contain information about context, for example:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "message": "Got payment payment",\n  "level": "INFO",\n  "payment": {\n    "id": "131234234",\n    "amount": 432\n  }\n}\n')),(0,o.yg)("p",null,"Note that card number is not present at all as it was ",(0,o.yg)("inlineCode",{parentName:"p"},"@hidden"),"."),(0,o.yg)("h3",{id:"context-support"},"Context support"),(0,o.yg)("p",null,"Let's say your effect type has some context \u2014 it could be trace id or some domain info:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"import cats._\nimport cats.effect._\n\ncase class TraceId(id: Long)\n\ntype TracedIO[A] = ReaderT[TraceId, IO, A]\n")),(0,o.yg)("p",null,"tofu.logging can extract it and automatically add into the structure of every log message:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},'class MyService[F[_] : Logging] {\n  def sayHello: F[Unit] = info"Hello!"\n}\n\nval ioservice = new MyService[IO]\nval tracedService = new MyService[TracedIO]\n')),(0,o.yg)("p",null,"(",(0,o.yg)("em",{parentName:"p"},"Note the absence of anything related to context in MyService, logging doest it all itself."),")"),(0,o.yg)("p",null,"Now if we run ",(0,o.yg)("inlineCode",{parentName:"p"},"tracedService.sayHello")," the log message structure will contain the trace id:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "message": "Hello!",\n  "level": "INFO",\n  "trace.id": 64534\n}\n')),(0,o.yg)("p",null,"and if we run ",(0,o.yg)("inlineCode",{parentName:"p"},"ioService.sayHello")," the message will be clean:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "message": "Hello!",\n  "level": "INFO"\n}\n')),(0,o.yg)("p",null,"More on that can be found on the dedicated ",(0,o.yg)("a",{parentName:"p",href:"/tofu/docs/tofu.logging.recipes.context"},"recipe page"),"."),(0,o.yg)("h2",{id:"whats-next"},"What's next"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"You can read about core concepts ",(0,o.yg)("a",{parentName:"li",href:"/tofu/docs/tofu.logging.main.entities"},"here")),(0,o.yg)("li",{parentName:"ul"},"You can see the recipes and discover what you need to use ",(0,o.yg)("inlineCode",{parentName:"li"},"logging")," ",(0,o.yg)("a",{parentName:"li",href:"/tofu/docs/tofu.logging.recipes"},"here"))))}d.isMDXComponent=!0}}]);
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9858],{827:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>p,contentTitle:()=>g,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var t=a(8168),i=a(8587),o=(a(6540),a(5680)),l=["components"],r={id:"tofu.logging.recipes.zio",title:"ZIO Logging"},g=void 0,s={unversionedId:"tofu.logging.recipes.zio",id:"tofu.logging.recipes.zio",title:"ZIO Logging",description:"ZIO logging",source:"@site/../docs/tofu.logging.recipes.zio.md",sourceDirName:".",slug:"/tofu.logging.recipes.zio",permalink:"/tofu/docs/tofu.logging.recipes.zio",draft:!1,tags:[],version:"current",lastUpdatedBy:"Ivan Malyshev",lastUpdatedAt:1635935253,formattedLastUpdatedAt:"Nov 3, 2021",frontMatter:{id:"tofu.logging.recipes.zio",title:"ZIO Logging"},sidebar:"docs",previous:{title:"Logging auto derivation",permalink:"/tofu/docs/tofu.logging.recipes.auto"},next:{title:"ZIO2 Logging",permalink:"/tofu/docs/tofu.logging.recipes.zio2"}},p={},c=[{value:"ZIO logging",id:"zio-logging",level:2},{value:"Example",id:"example",level:3},{value:"Custom <code>Loggable</code>",id:"custom-loggable",level:3},{value:"Context logging",id:"context-logging",level:3}],d={toc:c},m="wrapper";function u(e){var n=e.components,a=(0,i.A)(e,l);return(0,o.yg)(m,(0,t.A)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h2",{id:"zio-logging"},"ZIO logging"),(0,o.yg)("p",null,"To use logging functional adapted for ZIO users, first add the following dependency:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-sbt"},'libraryDependencies += "tf.tofu" %% "tofu-zio-logging" % "<latest version in the badge in README>"\n')),(0,o.yg)("p",null,"Then import the package:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"import tofu.logging.zlogs._\n")),(0,o.yg)("p",null,"This contains some useful stuff:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"tofu.logging.Logging")," type aliases\\\nThese services do logs.",(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"ULogging")," \u2014 is a type alias for ",(0,o.yg)("inlineCode",{parentName:"li"},"Logging[UIO]"),". Logging methods have no environment like\n",(0,o.yg)("inlineCode",{parentName:"li"},"def info(message: String, values: LoggedValue*): UIO[Unit]")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"ZLogging[R]")," \u2014 is a type alias for ",(0,o.yg)("inlineCode",{parentName:"li"},"Logging[URIO[R, *]]"),". Logging methods require a ZIO environment ",(0,o.yg)("inlineCode",{parentName:"li"},"R"),":\n",(0,o.yg)("inlineCode",{parentName:"li"},"def info(message: String, values: LoggedValue*): URIO[R, Unit]"))))),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},(0,o.yg)("inlineCode",{parentName:"p"},"ZLogging.Make")," type\\\nUse this instead of ",(0,o.yg)("inlineCode",{parentName:"p"},"tofu.logging.Loging.Make"),". ",(0,o.yg)("inlineCode",{parentName:"p"},"Make")," is a factory creating ",(0,o.yg)("inlineCode",{parentName:"p"},"Logging")," instances with no side effects."),(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"ZLogging.Make")," \u2014 is a type alias for ",(0,o.yg)("inlineCode",{parentName:"li"},"Logs[Id, UIO]"),", produces plain instances of ",(0,o.yg)("inlineCode",{parentName:"li"},"ULogging"),"."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"ZLogging.ZMake[R]")," \u2014 is a type alias for ",(0,o.yg)("inlineCode",{parentName:"li"},"Logs[Id, URIO[R, *]]"),", produces contextual ",(0,o.yg)("inlineCode",{parentName:"li"},"ZLogging[R]"),".")),(0,o.yg)("p",{parentName:"li"},"Read more about logging factory in ",(0,o.yg)("a",{parentName:"p",href:"/tofu/docs/tofu.logging.main.entities"},"core concepts"),"."))),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"ZLogging.Make")," object\\\nProvides several methods for creating ZIO layers with ",(0,o.yg)("inlineCode",{parentName:"li"},"Make")," instances.",(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"layerPlain")," creates layer contains simple implementation of ",(0,o.yg)("inlineCode",{parentName:"li"},"ZLogging.Make")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"layerContextual[R: Loggable]")," makes a fabric ",(0,o.yg)("inlineCode",{parentName:"li"},"ZMake[R]")," of contextual ",(0,o.yg)("inlineCode",{parentName:"li"},"ZLogging[R]")," retrieving a context from\nthe ZIO environment of the logging methods"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"layerPlainWithContext[C: Loggable, ContextService](f: ContextService => UIO[C])")," creates layers with an implementation\nof ",(0,o.yg)("inlineCode",{parentName:"li"},"ZLogging.Make")," encapsulated context inside. Every logging methods will call function ",(0,o.yg)("inlineCode",{parentName:"li"},"f")," on the ",(0,o.yg)("inlineCode",{parentName:"li"},"ContextService"),"\nto get a context which will be added to the logs. The ",(0,o.yg)("inlineCode",{parentName:"li"},"ContextService")," is supposed to be provided at the app creation point\nvia ZLayer environment.")))),(0,o.yg)("h3",{id:"example"},"Example"),(0,o.yg)("p",null,"Let's write a simple service, which logs a current date. "),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},'import tofu.logging.zlogs._\nimport tofu.syntax.logging._\nimport zio._\nimport zio.clock._\n\ntrait BarService {\n  def foo: Task[Unit]\n}\n\nclass BarServiceImpl(clock: Clock.Service, logs: ZLogging.Make)\n  extends BarService {\n\n  private implicit val log: ULogging = logs.forService[BarServiceImpl]\n\n  override def foo: Task[Unit] =\n    for {\n      _ <- log.info("Start program")\n      dt <- clock.localDateTime\n      date = dt.toLocalDate\n      _ <- debug"Got current date $date"\n    } yield ()\n}\n\nobject BarService {\n  val live: URLayer[Clock with TofuLogs, Has[BarService]] = (new BarServiceImpl(_, _)).toLayer\n}\n')),(0,o.yg)("p",null,"What can we learn from this code?"),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},"According to ZIO ",(0,o.yg)("a",{parentName:"li",href:"https://zio.dev/1.x/datatypes/contextual/index#module-pattern-20"},"Module Pattern 2.0"),"\nclass constructors are used to define service dependencies. At the end of the day the class constructor\nis lifted to ZLayer: ",(0,o.yg)("inlineCode",{parentName:"li"},"(new BarServiceImpl(_, _)).toLayer")),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("inlineCode",{parentName:"li"},"TofuLogs")," is a type alias for ",(0,o.yg)("inlineCode",{parentName:"li"},"Has[ZLogging.Make]"),", but ZIO encourages us to use explicitly the ",(0,o.yg)("inlineCode",{parentName:"li"},"Has")," wrapper\nwhenever we want to specify the dependency on a service."),(0,o.yg)("li",{parentName:"ol"},"Logging methods can be used:",(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},"explicitly like ",(0,o.yg)("inlineCode",{parentName:"li"},'log.info("Start getting datetime")')),(0,o.yg)("li",{parentName:"ul"},"via string interpolation provided by ",(0,o.yg)("a",{parentName:"li",href:"/tofu/docs/tofu.logging.syntax"},"tofu.syntax.logging"),". For this purpose\nlog service was defined as ",(0,o.yg)("inlineCode",{parentName:"li"},"implicit"),"."))),(0,o.yg)("li",{parentName:"ol"},"To log object Tofu must know how to present it in the log message. This way is described by instances of ",(0,o.yg)("inlineCode",{parentName:"li"},"Loggable"),"\ntype class. We did provide no one because Tofu already has ",(0,o.yg)("inlineCode",{parentName:"li"},"java.time")," ",(0,o.yg)("inlineCode",{parentName:"li"},"Loggable")," instances.")),(0,o.yg)("p",null,"Now look at the main app:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"import tofu.logging.zlogs.ZLogging\nimport zio._\nimport zio.magic._\n\nobject Main extends zio.App {\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] = {\n    for {\n      barService <- ZIO.service[BarService]\n      _ <- barService.foo\n    } yield ()\n  }.injectCustom(\n    BarService.live,\n    ZLogging.Make.layerPlain\n  ).exitCode\n}\n")),(0,o.yg)("p",null,"Thanks to ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/kitlangton/zio-magic/"},"zio-magic")," we can just list all dependencies in\nthe ",(0,o.yg)("inlineCode",{parentName:"p"},"injectCustom")," method, not design layers manually. Output of the program will be:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-json",metastring:"lines",lines:!0},'{"level":"INFO","message":"Start program"}\n{"level":"DEBUG","message":"Got current date 2021-09-20"}\n')),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Note:")," for simplicity here and further extra fields (e.g. ",(0,o.yg)("em",{parentName:"p"},"timestamp"),", ",(0,o.yg)("em",{parentName:"p"},"threadName"),") were removed."),(0,o.yg)("h3",{id:"custom-loggable"},"Custom ",(0,o.yg)("inlineCode",{parentName:"h3"},"Loggable")),(0,o.yg)("p",null,"Default ",(0,o.yg)("inlineCode",{parentName:"p"},"Loggable[LocalDate]")," is based on ",(0,o.yg)("inlineCode",{parentName:"p"},"stringValue")," instance, hence the date was logged as a plain string, not key-value.\nWhat if you want the date to be a separated field in json? Well, you can customize ",(0,o.yg)("inlineCode",{parentName:"p"},"Loggable"),". Add the following line into the ",(0,o.yg)("inlineCode",{parentName:"p"},"BarServiceImpl"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},'private implicit val customDateLoggable = Loggable[LocalDate].named(name="date")\n')),(0,o.yg)("p",null,"Now the output looks like:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-json",metastring:"lines",lines:!0},'{"level":"DEBUG","message":"Got current date 2021-09-20","date":"2021-09-20"}\n')),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"Loggable.apply[LocalDate]")," summons an instance from the global scope, ",(0,o.yg)("inlineCode",{parentName:"p"},".named")," converts logged object into a single field named ",(0,o.yg)("inlineCode",{parentName:"p"},"name"),".\nThere are several methods to create and modify ",(0,o.yg)("inlineCode",{parentName:"p"},"Loggable")," instances, read more in ",(0,o.yg)("a",{parentName:"p",href:"/tofu/docs/tofu.logging.loggable"},"Loggable")," section."),(0,o.yg)("h3",{id:"context-logging"},"Context logging"),(0,o.yg)("p",null,"Let's consider how to log the context along with actual log message. If you have an instance of ",(0,o.yg)("inlineCode",{parentName:"p"},"Loggable")," for your context,\nyou can have it logged automagically. For example:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"import derevo.derive\nimport tofu.logging.derivation.loggable\n\n@derive(loggable)\nfinal case class Context(requestId: Int)\n")),(0,o.yg)("p",null,"Here we use ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/tofu-tf/derevo"},"Tofu Derevo")," for automatic derivation ",(0,o.yg)("a",{parentName:"p",href:"/tofu/docs/tofu.logging.loggable"},"Loggable")," instance."),(0,o.yg)("p",null,"One possible way to add a context to your logs is to use ",(0,o.yg)("inlineCode",{parentName:"p"},"layerPlainWithContext")," which encapsulates dealing with the context inside\n(otherwise you can use ",(0,o.yg)("inlineCode",{parentName:"p"},"layerContextual")," retrieving the context from a ZIO environment ",(0,o.yg)("inlineCode",{parentName:"p"},"R"),", but we won't cover it here)."),(0,o.yg)("p",null,"The main idea of this approach is to store your context in ZIO ",(0,o.yg)("a",{parentName:"p",href:"https://zio.dev/1.x/datatypes/fiber/fiberref"},"FiberRef"),".\nIt provides all the power of State Monad. Unlike Java's ",(0,o.yg)("inlineCode",{parentName:"p"},"ThreadLocal"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"FiberRef")," has copy-on-fork semantic:\na child ",(0,o.yg)("a",{parentName:"p",href:"https://zio.dev/1.x/datatypes/fiber/fiber/"},"Fiber")," starts with ",(0,o.yg)("inlineCode",{parentName:"p"},"FiberRef")," values of its parent.\nWhen the child set a new value of FiberRef, the change is visible only to the child itself. This means if we set ",(0,o.yg)("inlineCode",{parentName:"p"},"requestId")," value to ",(0,o.yg)("inlineCode",{parentName:"p"},"117"),"\n(e.g. at the start of the request) and pass the ",(0,o.yg)("inlineCode",{parentName:"p"},"FiberRef")," to a child fiber, it sees the value ",(0,o.yg)("inlineCode",{parentName:"p"},"117"),"."),(0,o.yg)("p",null,"Let's modify Main app.  We have to define a context service and how it provides the context. "),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"object Main extends zio.App {\n  val contextLayer: ULayer[Has[FiberRef[Context]]] = FiberRef.make(Context(-10)).toLayer\n\n  val logsLayer: URLayer[Has[FiberRef[Context]], TofuLogs] = ZLogging.Make.layerPlainWithContext(_.get)\n\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] = {\n    for {\n      (barService, ref) <- ZIO.services[BarService, FiberRef[Context]]\n      f1 <- barService.foo.fork\n      _ <- ref.set(Context(117))\n      f2 <- barService.foo.fork\n      _ <- f1.join <&> f2.join\n    } yield ()\n  }.injectCustom(\n    BarService.live,\n    logsLayer,\n    contextLayer\n  ).exitCode\n}\n")),(0,o.yg)("p",null,"Run the program and look at the output:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-json",metastring:"lines",lines:!0},'{"level":"INFO","message":"Start program","requestId":-10}\n{"level":"DEBUG","message":"Got current date 2021-09-20","requestId":-10,"date":"2021-09-20"}\n{"level":"INFO","message":"Start program","requestId":117}\n{"level":"DEBUG","message":"Got current date 2021-09-20","requestId":117,"date":"2021-09-20"}\n')),(0,o.yg)("p",null,"As you can see, the context has been added to log messages without any changes to the service calling the logging methods."))}u.isMDXComponent=!0},5680:(e,n,a)=>{a.d(n,{xA:()=>p,yg:()=>u});var t=a(6540);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach(function(n){i(e,n,a[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))})}return e}function r(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var g=t.createContext({}),s=function(e){var n=t.useContext(g),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},p=function(e){var n=s(e.components);return t.createElement(g.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef(function(e,n){var a=e.components,i=e.mdxType,o=e.originalType,g=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),c=s(a),m=i,u=c["".concat(g,".").concat(m)]||c[m]||d[m]||o;return a?t.createElement(u,l(l({ref:n},p),{},{components:a})):t.createElement(u,l({ref:n},p))});function u(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=a.length,l=new Array(o);l[0]=m;var r={};for(var g in n)hasOwnProperty.call(n,g)&&(r[g]=n[g]);r.originalType=e,r[c]="string"==typeof e?e:i,l[1]=r;for(var s=2;s<o;s++)l[s]=a[s];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}m.displayName="MDXCreateElement"}}]);
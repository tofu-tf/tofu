"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2628],{5680:(e,n,t)=>{t.d(n,{xA:()=>s,yg:()=>m});var r=t(6540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach(function(n){i(e,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function c(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var g=r.createContext({}),l=function(e){var n=r.useContext(g),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=l(e.components);return r.createElement(g.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef(function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,g=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=l(t),f=i,m=p["".concat(g,".").concat(f)]||p[f]||u[f]||o;return t?r.createElement(m,a(a({ref:n},s),{},{components:t})):r.createElement(m,a({ref:n},s))});function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=f;var c={};for(var g in n)hasOwnProperty.call(n,g)&&(c[g]=n[g]);c.originalType=e,c[p]="string"==typeof e?e:i,a[1]=c;for(var l=2;l<o;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},6538:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>g,default:()=>m,frontMatter:()=>c,metadata:()=>l,toc:()=>p});var r=t(8168),i=t(8587),o=(t(6540),t(5680)),a=["components"],c={id:"tofu.logging.recipes.service",title:"Logs for a service"},g=void 0,l={unversionedId:"tofu.logging.recipes.service",id:"tofu.logging.recipes.service",title:"Logs for a service",description:"Service logging",source:"@site/../docs/tofu.logging.recipes.service.md",sourceDirName:".",slug:"/tofu.logging.recipes.service",permalink:"/tofu/docs/tofu.logging.recipes.service",draft:!1,tags:[],version:"current",lastUpdatedBy:"\u0410\u043d\u0442\u043e\u043d \u0412\u043e\u0438\u0306\u0446\u0438\u0448\u0435\u0432\u0441\u043a\u0438\u0438\u0306",lastUpdatedAt:1631546433,formattedLastUpdatedAt:"Sep 13, 2021",frontMatter:{id:"tofu.logging.recipes.service",title:"Logs for a service"},sidebar:"docs",previous:{title:"The simplest form",permalink:"/tofu/docs/tofu.logging.recipes.simple"},next:{title:"Contextual Logging",permalink:"/tofu/docs/tofu.logging.recipes.context"}},s={},p=[{value:"Service logging",id:"service-logging",level:2}],u={toc:p},f="wrapper";function m(e){var n=e.components,t=(0,i.A)(e,a);return(0,o.yg)(f,(0,r.A)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h2",{id:"service-logging"},"Service logging"),(0,o.yg)("p",null,"One downside of a ",(0,o.yg)("a",{parentName:"p",href:"/tofu/docs/tofu.logging.recipes.simple"},"simple logging")," is that in every service class you have to write this line:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"private implicit val logging: Logging[F] = Logging.Make[F].forService[MyService[F]]\n")),(0,o.yg)("p",null,"It is quite boilerplate-ish, so ",(0,o.yg)("inlineCode",{parentName:"p"},"tofu.logging")," has the workaround:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},'class MyService[F[_] : Monad : MyService.Log](someDependency: DependencyService) {\n\n  def makeThis: F[Unit] = someDependency.foo(30) >> info"Something"\n\n  def makeThat: F[Unit] = someDependency.foo(30).flatTap(result => warn"Some another thing $result")\n}\n\nobject MyService extends LoggingCompanion[MyService]\n\n')),(0,o.yg)("p",null,"The line ",(0,o.yg)("inlineCode",{parentName:"p"},"object MyService extends LoggingCompanion[MyService]")," mixes in type Log to the companion, which is just alias\nfor ",(0,o.yg)("a",{parentName:"p",href:"/tofu/docs/tofu.logging.main.entities#logging"},(0,o.yg)("inlineCode",{parentName:"a"},"ServiceLogging[F, MyService]")),"."),(0,o.yg)("p",null,"This type carries information about which class it is supposed to be used for, so Scala compiler is able to implicitly\ncreate from Logs and pass desired ",(0,o.yg)("inlineCode",{parentName:"p"},"ServiceLogging")," instance."),(0,o.yg)("p",null,"And in the wiring of the app, just as in ",(0,o.yg)("a",{parentName:"p",href:"/tofu/docs/tofu.logging.recipes.simple"},"simple logging"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"import cats.effect.ExitCode\n\ndef run: IO[ExitCode] = {\n  implicit val logs: Logging.Make[IO] = Logging.Make.plain[IO] // or Make.contextual[IO, C]\n\n  val service = new MyService[IO](???)\n}\n")),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"MyService.Log")," instance is created implicitly just for this service from the implicit value of ",(0,o.yg)("inlineCode",{parentName:"p"},"Logging.Make"),"."))}m.isMDXComponent=!0}}]);
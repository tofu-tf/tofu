"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6593],{5680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>y});var o=t(6540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach(function(n){a(e,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function l(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=o.createContext({}),g=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=g(e.components);return o.createElement(s.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef(function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=g(t),d=a,y=c["".concat(s,".").concat(d)]||c[d]||p[d]||r;return t?o.createElement(y,i(i({ref:n},u),{},{components:t})):o.createElement(y,i({ref:n},u))});function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var g=2;g<r;g++)i[g]=t[g];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7987:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>y,frontMatter:()=>l,metadata:()=>g,toc:()=>c});var o=t(8168),a=t(8587),r=(t(6540),t(5680)),i=["components"],l={id:"tofu.logging.annotation",title:"LogAnnotation"},s=void 0,g={unversionedId:"tofu.logging.annotation",id:"tofu.logging.annotation",title:"LogAnnotation",description:"LogAnnotation",source:"@site/../docs/tofu.logging.annotation.md",sourceDirName:".",slug:"/tofu.logging.annotation",permalink:"/tofu/docs/tofu.logging.annotation",draft:!1,tags:[],version:"current",lastUpdatedBy:"Ivan Malyshev",lastUpdatedAt:1668498925,formattedLastUpdatedAt:"Nov 15, 2022",frontMatter:{id:"tofu.logging.annotation",title:"LogAnnotation"},sidebar:"docs",previous:{title:"Logback Layouts",permalink:"/tofu/docs/tofu.logging.layouts"},next:{title:"Recipe list",permalink:"/tofu/docs/tofu.logging.recipes"}},u={},c=[{value:"LogAnnotation",id:"logannotation",level:2},{value:"Exapmle",id:"exapmle",level:3}],p={toc:c},d="wrapper";function y(e){var n=e.components,t=(0,a.A)(e,i);return(0,r.yg)(d,(0,o.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h2",{id:"logannotation"},"LogAnnotation"),(0,r.yg)("p",null,"Some data processing platforms have troubles with a large amount of log fields.",(0,r.yg)("br",{parentName:"p"}),"\n","One possible way to limit the number of fields your application logs is listening annotations and using them every time\nyou log a value."),(0,r.yg)("p",null,"Having a list of annotations in front of your eyes, you can easily make sure that the same names are not assigned to\ndifferent values\n(which can lead to an invalid json and corrupt your structured logs)."),(0,r.yg)("p",null,"Another problem can occur if the same field is logged with different types (e.g. as a string and as a number)\n. ",(0,r.yg)("inlineCode",{parentName:"p"},"LogAnnotation")," statically types logging values.\nThis helps also to store and retrieves values from data structures like ",(0,r.yg)("inlineCode",{parentName:"p"},"Map[LogAnnotation[_], Any]")," (useful for\nzio-users who stores log context on ",(0,r.yg)("inlineCode",{parentName:"p"},"FiberRefs"),")."),(0,r.yg)("h3",{id:"exapmle"},"Exapmle"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'case class MyId(id: String)\n\nobject LogKey {\n  val count: LogAnnotation[Int] = LogAnnotation.make[Int]("count")\n  val myId: LogAnnotation[MyId] = Loggable[String].contramap((_: MyId).id).logAnnotation("id")\n}\n\nval maybeId = Some(MyId("123"))\n\nlog.info("Hello", LogKey.count -> 5, LogKey.myId -> maybeId)\n// log.error("this won\'t compile", LogKey.count -> "5")\n\n')),(0,r.yg)("p",null,"will produce:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "message": "Hello",\n  "count": 5,\n  "id": "123"\n}\n')))}y.isMDXComponent=!0}}]);
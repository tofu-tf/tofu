"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6424],{3143:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=t(8168),o=t(8587),r=(t(6540),t(5680)),l=["components"],i={id:"memo",title:"Memo"},c=void 0,s={unversionedId:"memo",id:"memo",title:"Memo",description:"Installation",source:"@site/../docs/memo.md",sourceDirName:".",slug:"/memo",permalink:"/tofu/docs/memo",draft:!1,tags:[],version:"current",lastUpdatedBy:"Rat King",lastUpdatedAt:1619684248,formattedLastUpdatedAt:"Apr 29, 2021",frontMatter:{id:"memo",title:"Memo"},sidebar:"docs",previous:{title:"Console",permalink:"/tofu/docs/console"},next:{title:"Streams",permalink:"/tofu/docs/streams"}},u={},p=[{value:"Installation",id:"installation",level:2},{value:"Functionality",id:"functionality",level:2},{value:"Examples",id:"examples",level:2},{value:"Single value cache",id:"single-value-cache",level:3},{value:"Value mapping cache",id:"value-mapping-cache",level:3},{value:"TTL",id:"ttl",level:3},{value:"Forced invalidation",id:"forced-invalidation",level:3}],m={toc:p},f="wrapper";function d(e){var n=e.components,t=(0,o.A)(e,l);return(0,r.yg)(f,(0,a.A)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h2",{id:"installation"},"Installation"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},'"tf.tofu" %% "tofu" % tofu-version'),(0,r.yg)("br",{parentName:"p"}),"\n","or as a standalone dependency:",(0,r.yg)("br",{parentName:"p"}),"\n",(0,r.yg)("inlineCode",{parentName:"p"},'"tf.tofu" %% "tofu-memo" % tofu-version')),(0,r.yg)("h2",{id:"functionality"},"Functionality"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"A cache of a single value on access."),(0,r.yg)("li",{parentName:"ul"},"A cache of a values mapping on access."),(0,r.yg)("li",{parentName:"ul"},"TTL. Expired values are discarded on access."),(0,r.yg)("li",{parentName:"ul"},"Forced invalidation based on time.")),(0,r.yg)("p",null,"There are no"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Infinite caching (workaround is ttl ",(0,r.yg)("inlineCode",{parentName:"li"},"FiniteDuration(Long.MaxValue, TimeUnit.NANOSECONDS)")," = 292 days)."),(0,r.yg)("li",{parentName:"ul"},"Background renewal of cached values."),(0,r.yg)("li",{parentName:"ul"},"Forced invalidation of single key (mapping cache).")),(0,r.yg)("h2",{id:"examples"},"Examples"),(0,r.yg)("h3",{id:"single-value-cache"},"Single value cache"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.effect.Clock\nimport monix.eval.Task\nimport monix.execution.Scheduler.Implicits.global\nimport scala.concurrent.duration._\nimport tofu.common.Console\nimport tofu.concurrent._\nimport tofu.memo._\nimport tofu.syntax.console._\nimport tofu.syntax.monadic._\n\ndef effect[F[_] : Console: Functor]: F[Int] = putStrLn("called").as(335)\n\ndef f[F[_] : Console : Clock: Monad : Refs] =\n  for {\n    kasha <- Cached[F](effect)(10.minutes, CacheControl.empty.pure[F]).ref\n    v1 <- kasha\n    v2 <- kasha\n    v3 <- kasha\n  } yield List(v1,v2,v3).sum\n\nf[Task].runSyncUnsafe()\n')),(0,r.yg)("h3",{id:"value-mapping-cache"},"Value mapping cache"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala:reset"},'import cats._\nimport cats.effect.Clock\nimport monix.eval.Task\nimport monix.execution.Scheduler.Implicits.global\nimport scala.concurrent.duration._\nimport tofu.common.Console\nimport tofu.concurrent._\nimport tofu.memo._\nimport tofu.syntax.console._\nimport tofu.syntax.monadic._\n\n\ndef effect[F[_] : Console: Functor]: Int => F[String] =\n  x => putStrLn("called").as(s"Number $x")\n\ndef f[F[_] : Console : Clock: Monad: Refs] =\n  for {\n    kasha <- CachedFunc[F](effect)(10.minutes, CacheControl.empty.pure[F]).refVals.ref\n    v1 <- kasha(335)\n    _  <- putStrLn(v1)\n    v2 <- kasha(335)\n    _  <- putStrLn(v2)\n    v3 <- kasha(336)\n    _  <- putStrLn(v3)\n  } yield ()\n\nf[Task].runSyncUnsafe()\n')),(0,r.yg)("h3",{id:"ttl"},"TTL"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.effect.{Clock, Timer}\nimport monix.eval.Task\nimport monix.execution.Scheduler.Implicits.global\nimport scala.concurrent.duration._\nimport tofu.common.Console\nimport tofu.concurrent._\nimport tofu.memo._\nimport tofu.syntax.console._\nimport tofu.syntax.monadic._\nimport tofu.syntax.timer._\n\n\ndef longEffect[F[_]: Console: Monad: Timer]: Int => F[String] =\n  x =>\n    Timer[F].sleep(1.second) >>\n    putStrLn("called").as(s"Number $x")\n\ndef f[F[_]: Console: Refs: Clock: Timer: Monad](ttl : FiniteDuration) =\n  for {\n    kasha <- CachedFunc[F](longEffect)(ttl, CacheControl.empty.pure[F]).refVals.ref\n    v1 <- kasha(335)\n    _  <- putStrLn(v1)\n    _  <- sleep(ttl - 2.seconds)\n    v2 <- kasha(335)\n    _  <- putStrLn(v2)\n    _  <- sleep(3.seconds)\n    v3 <- kasha(335)\n    _  <- putStrLn(v3)\n  } yield ()\n\nf[Task](10.seconds).runSyncUnsafe()\n')),(0,r.yg)("p",null,"There is a pitfall with TTL. Cached value keeps time of access to cache and not time when the effect completes. Just keep it in mind. Modification of the last example "),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'def longEffect[F[_]: Console: Monad: Timer]: Int => F[String] =\n  x =>\n    sleep(3.seconds) >>\n    putStrLn("called").as(s"Number $x")\n')),(0,r.yg)("p",null,"returns"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"called\nNumber 335\ncalled\nNumber 335\nNumber 335\n")),(0,r.yg)("h3",{id:"forced-invalidation"},"Forced invalidation"),(0,r.yg)("p",null,"To invalidate cache update CacheControl and set it to current time:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala:reset"},'import cats._\nimport cats.effect.{Clock, Timer}\nimport java.util.concurrent.TimeUnit\nimport monix.eval.Task\nimport monix.execution.Scheduler.Implicits.global\nimport scala.concurrent.duration._\nimport tofu.common.Console\nimport tofu.concurrent._\nimport tofu.memo._\nimport tofu.syntax.console._\nimport tofu.syntax.monadic._\nimport tofu.syntax.timer._\n\n\ndef effect[F[_]: Functor: Console: Timer]: Int => F[String] =\n  x => putStrLn("called").as(s"Number $x")\n\ndef f[F[_]: Monad :Refs : Clock: Timer: Console](ttl : FiniteDuration) =\n  for {\n    ref   <- Refs[F].of(CacheControl.empty)\n    kasha <- CachedFunc[F](effect[F])(ttl, ref.get).refVals.ref\n    v1    <- kasha(335)\n    _     <- putStrLn(v1)\n    _     <- sleep(2.seconds)\n    v2    <- kasha(335)\n    _     <- putStrLn(v2)\n    now   <- Clock[F].realTime(TimeUnit.MILLISECONDS)\n    _     <- ref.update(_.copy(InvalidationTS(now)))\n    _     <- sleep(3.seconds)\n    v3    <- kasha(335)\n    _     <- putStrLn(v3)\n  } yield ()\n\nf[Task](1000.seconds).runSyncUnsafe()\n')),(0,r.yg)("p",null,"How it works. Cached value remembers time of read access during update (T_update). On any read access tofu selects a time to compare with T_update (update value when ",(0,r.yg)("inlineCode",{parentName:"p"},"T_selected > T_update"),"). Selection is based on a formula ",(0,r.yg)("inlineCode",{parentName:"p"},"max(T_now - TTL, T_CacheControl)"),". If you set ",(0,r.yg)("inlineCode",{parentName:"p"},"T_CacheControl = T_now")," then always T_CacheControl is more than T_update. After update of a value, T_update equals T_CacheControl."))}d.isMDXComponent=!0},5680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>d});var a=t(6540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach(function(n){o(e,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=a.createContext({}),s=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(c.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},f=a.forwardRef(function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=s(t),f=o,d=p["".concat(c,".").concat(f)]||p[f]||m[f]||r;return t?a.createElement(d,l(l({ref:n},u),{},{components:t})):a.createElement(d,l({ref:n},u))});function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,l=new Array(r);l[0]=f;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[p]="string"==typeof e?e:o,l[1]=i;for(var s=2;s<r;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}f.displayName="MDXCreateElement"}}]);
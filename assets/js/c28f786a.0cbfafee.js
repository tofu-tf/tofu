"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5392],{5680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>y});var o=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach(function(t){a(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),g=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=g(e.components);return o.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef(function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=g(n),d=a,y=p["".concat(s,".").concat(d)]||p[d]||u[d]||r;return n?o.createElement(y,i(i({ref:t},c),{},{components:n})):o.createElement(y,i({ref:t},c))});function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var g=2;g<r;g++)i[g]=n[g];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6890:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>y,frontMatter:()=>l,metadata:()=>g,toc:()=>p});var o=n(8168),a=n(8587),r=(n(6540),n(5680)),i=["components"],l={id:"tofu.logging.recipes.context",title:"Contextual Logging"},s="Working with context",g={unversionedId:"tofu.logging.recipes.context",id:"tofu.logging.recipes.context",title:"Contextual Logging",description:"For most of the apps it is crucial to add some kind of context for the logs. It makes working with logs simpler and",source:"@site/../docs/tofu.logging.recipes.context.md",sourceDirName:".",slug:"/tofu.logging.recipes.context",permalink:"/tofu/docs/tofu.logging.recipes.context",draft:!1,tags:[],version:"current",lastUpdatedBy:"Anton Kudryavtsev",lastUpdatedAt:1733993116,formattedLastUpdatedAt:"Dec 12, 2024",frontMatter:{id:"tofu.logging.recipes.context",title:"Contextual Logging"},sidebar:"docs",previous:{title:"Logs for a service",permalink:"/tofu/docs/tofu.logging.recipes.service"},next:{title:"Logging auto derivation",permalink:"/tofu/docs/tofu.logging.recipes.auto"}},c={},p=[{value:"Context abstractions",id:"context-abstractions",level:2},{value:"Structure and context",id:"structure-and-context",level:2},{value:"Logs creation",id:"logs-creation",level:2},{value:"Using created logs",id:"using-created-logs",level:2},{value:"Example",id:"example",level:2}],u={toc:p},d="wrapper";function y(e){var t=e.components,n=(0,a.A)(e,i);return(0,r.yg)(d,(0,o.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"working-with-context"},"Working with context"),(0,r.yg)("p",null,"For most of the apps it is crucial to add some kind of context for the logs. It makes working with logs simpler and\neasier."),(0,r.yg)("h2",{id:"context-abstractions"},"Context abstractions"),(0,r.yg)("p",null,"tofu.logging relies on set of contextual abstractions from tofu:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"WithContext[F[_], C]")," \u2014 describes the existence of ",(0,r.yg)("inlineCode",{parentName:"li"},"C")," in ",(0,r.yg)("inlineCode",{parentName:"li"},"F")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"WithLocal[F[_], C]"),' \u2014 same as latter but with ability to "temporarily" alter ',(0,r.yg)("inlineCode",{parentName:"li"},"C")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"WithProvide[F[_], G[_], C]")," \u2014 describes the fact that ",(0,r.yg)("inlineCode",{parentName:"li"},"G[A]")," can be evaluated to ",(0,r.yg)("inlineCode",{parentName:"li"},"F[A]")," with given ",(0,r.yg)("inlineCode",{parentName:"li"},"C")," (like running\nReader-monad)")),(0,r.yg)("p",null,"More on that can be found in the context ",(0,r.yg)("a",{parentName:"p",href:"/tofu/docs/withcontext"},"documentation"),"."),(0,r.yg)("h2",{id:"structure-and-context"},"Structure and context"),(0,r.yg)("p",null,"tofu.logging is a structured logging. It means that when you log a message it will be produced as JSON (or other\nstructure), not just plain text. This structure has fields in it and the context appears as a set of fields and values.\nSee Loggable ",(0,r.yg)("a",{parentName:"p",href:"/tofu/docs/tofu.logging.main.entities#typeclass-loggablea"},"documentation")," on how to configure that."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},"@derive(loggable)\ncase class RequestContext(traceId: Long, session: Session)\n\n")),(0,r.yg)("p",null,"Here we describe the context of some request and also derive ",(0,r.yg)("inlineCode",{parentName:"p"},"Loggable")," instance for it."),(0,r.yg)("h2",{id:"logs-creation"},"Logs creation"),(0,r.yg)("p",null,"Only the ",(0,r.yg)("inlineCode",{parentName:"p"},"Logs")," factory carries information about context, while each of the logging instances doesn't have that\nanywhere in API. Let's define the effect the logging would happen in:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},"import cats.effect.IO\nimport cats.data.ReaderT\n\ntype RequestIO[A] = ReaderT[IO, RequestContext, A]\n")),(0,r.yg)("p",null,"Tofu has predefined instances of Contextual typeclasses for ReaderT (and also for ZIO in\nthe ",(0,r.yg)("inlineCode",{parentName:"p"},"tofu-zio")," ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/tofu-tf/tofu/tree/better-doobie-example/modules/zio"},"module"),")."),(0,r.yg)("p",null,"The first step is to create appropriate ",(0,r.yg)("inlineCode",{parentName:"p"},"Logs"),". Usually it is done at the point where you build your app:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},"implicit val logsMain: Logging.Make[IO] = Logging.Make.plain[IO]\nimplicit val logsContext: Logging.Make[RequestIO] = Logging.Make.contextual[RequestIO, RequestContext]\n")),(0,r.yg)("p",null,"Most of the time your app works with two or more effects, one of those is main and has no notion of context at all. The\nrest of the effects have some kind of context."),(0,r.yg)("h2",{id:"using-created-logs"},"Using created logs"),(0,r.yg)("p",null,"Second step is to use  ",(0,r.yg)("inlineCode",{parentName:"p"},"Logs")," to create ",(0,r.yg)("inlineCode",{parentName:"p"},"Logging")," for your service. Here ",(0,r.yg)("a",{parentName:"p",href:"/tofu/docs/tofu.logging.recipes.service"},"service logging recipe")," is used,\nbut it actually doesn't matter, you can use whatever way you want:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'class MyService[F[_] : MyService.Log] {\n  def sayHi = info"Hi!"\n}\n\n')),(0,r.yg)("p",null,"This is a service we will use as example. Note, that ",(0,r.yg)("strong",{parentName:"p"},"it has no ",(0,r.yg)("inlineCode",{parentName:"strong"},"WithContext")," bound")," or something alike, just logging.\nWe don't want to add infrastructure stuff like context in here."),(0,r.yg)("p",null,"Now let's see the difference between running this with ",(0,r.yg)("inlineCode",{parentName:"p"},"IO")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"RequestIO"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},"\nval ioservice = new MyService[IO] //implicitly derived logging from logsMain\nioservice.sayHi \n")),(0,r.yg)("p",null,"and the result is"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "message": "Hi!",\n  "level": "INFO"\n}\n')),(0,r.yg)("p",null,"And now with context:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},"\nval ioservice = new MyService[RequestIO] //implicitly derived logging from logsContext\nioservice.sayHi \n")),(0,r.yg)("p",null,"and the result is"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "message": "Hi!",\n  "level": "INFO",\n  "traceId": 34234234,\n  "session": {\n    "...": "..."\n  }\n}\n')),(0,r.yg)("h2",{id:"example"},"Example"),(0,r.yg)("p",null,"Check out the example ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/tofu-tf/tofu/tree/master/examples/ce2/src/main/scala-2/tofu/example/logging/service"},"here"),"."))}y.isMDXComponent=!0}}]);